#!/usr/bin/env node
var app = require('../app'),
    cookie = require('cookie');

app.set('port', process.env.PORT || 3001);

var server = app.listen(app.get('port'), function () {
    console.log('Express server listening on port ' + server.address().port);
});

var clients = {};
var clientsAll = {};
var messagesBuffer = [];
var messagesUserBuffer = [];
var io = require('socket.io')(server);

io.on('connection', function (socket) {
    var chat_user_id = null;
    var chat_username = null;
    var cookies;
    if (socket.conn.request.headers.cookie) {
        cookies = cookie.parse(socket.conn.request.headers.cookie);
        if (cookies.chat_user_id) {
            chat_user_id = cookies.chat_user_id;
        }
        if (cookies.chat_username) {
            chat_username = cookies.chat_username;
        }
    }

    if (chat_user_id && chat_username) {
        var isUserExists = false;
        for (var key in clients) {
            if (clients[key].id == chat_user_id) {
                isUserExists = true;
            }
        }

        if (!isUserExists) {
            clients[socket.id] = {};
            clients[socket.id].id = chat_user_id;
            clients[socket.id].username = chat_username;
        }

        clientsAll[socket.id] = {};
        clientsAll[socket.id].id = chat_user_id;
        clientsAll[socket.id].username = chat_username;

        socket.on('disconnect', function () {
            var message = {author: chat_username, text: 'disconnected.'};
            addToStore(message);
            io.sockets.emit('chat message', message);
            delete clients[socket.id];
            delete clientsAll[socket.id];
            for (var key in clientsAll) {
                if (clientsAll[key].id == chat_user_id) {
                    clients[key] = {};
                    clients[key].id = chat_user_id;
                    clients[key].username = chat_username;
                }
            }
            io.sockets.emit('clients', clients);
        });
        socket.on('chat message', function (msg) {
            addToStore(msg);
            io.emit('chat message', msg);
        });
        socket.on('chat message user', function (msg) {
            addToStoreUser(msg);
            for (var item in clientsAll) {
                if (msg.receiver_id == clientsAll[item].id || msg.sender_id == clientsAll[item].id) {
                    if (io.sockets.connected[item]) {
                        io.sockets.connected[item].emit('chat message user', msg);
                    }
                }
            }
        });

        messagesBuffer.forEach(function (item) {
            item.is_archive = true;
            io.sockets.connected[socket.id].emit('chat message', item);
        });
        messagesUserBuffer.forEach(function (item) {
            if (chat_user_id == item.sender_id || chat_user_id == item.receiver_id) {
                item.is_archive = true;
                io.sockets.connected[socket.id].emit('chat message user', item);
            }
        });
        var message = {author: chat_username, text: 'connected.'};
        addToStore(message);
        io.sockets.emit('chat message', message);
        io.sockets.emit('clients', clients);
    }
});

function getCurrentDate() {
    return new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
}

function addToStore(message) {
    message.date = getCurrentDate();
    message.is_archive = false;
    console.log('message: ' + JSON.stringify(message));
    messagesBuffer.push(message);
    if (messagesBuffer.length > 100) {
        messagesBuffer.shift();
    }
}

function addToStoreUser(message) {
    message.date = getCurrentDate();
    message.is_archive = false;
    console.log('message for user: ' + JSON.stringify(message));
    messagesUserBuffer.push(message);
    if (messagesUserBuffer.length > 100) {
        messagesUserBuffer.shift();
    }
}